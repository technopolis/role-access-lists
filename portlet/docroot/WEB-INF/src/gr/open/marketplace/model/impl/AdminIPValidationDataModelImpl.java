/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package gr.open.marketplace.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import gr.open.marketplace.model.AdminIPValidationData;
import gr.open.marketplace.model.AdminIPValidationDataModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AdminIPValidationData service. Represents a row in the &quot;opengr_AdminIPValidationData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link gr.open.marketplace.model.AdminIPValidationDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdminIPValidationDataImpl}.
 * </p>
 *
 * @author cotria
 * @see AdminIPValidationDataImpl
 * @see gr.open.marketplace.model.AdminIPValidationData
 * @see gr.open.marketplace.model.AdminIPValidationDataModel
 * @generated
 */
public class AdminIPValidationDataModelImpl extends BaseModelImpl<AdminIPValidationData>
	implements AdminIPValidationDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a admin i p validation data model instance should use the {@link gr.open.marketplace.model.AdminIPValidationData} interface instead.
	 */
	public static final String TABLE_NAME = "opengr_AdminIPValidationData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "ipAddresses", Types.VARCHAR },
			{ "roles", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "notes", Types.VARCHAR },
			{ "active_", Types.BOOLEAN },
			{ "debugMode", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table opengr_AdminIPValidationData (id_ LONG not null primary key,ipAddresses STRING null,roles STRING null,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,notes TEXT null,active_ BOOLEAN,debugMode BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table opengr_AdminIPValidationData";
	public static final String ORDER_BY_JPQL = " ORDER BY adminIPValidationData.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY opengr_AdminIPValidationData.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.gr.open.marketplace.model.AdminIPValidationData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.gr.open.marketplace.model.AdminIPValidationData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.gr.open.marketplace.model.AdminIPValidationData"),
			true);
	public static long ACTIVE_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long DEBUGMODE_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.gr.open.marketplace.model.AdminIPValidationData"));

	public AdminIPValidationDataModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AdminIPValidationData.class;
	}

	public String getModelClassName() {
		return AdminIPValidationData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("ipAddresses", getIpAddresses());
		attributes.put("roles", getRoles());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("notes", getNotes());
		attributes.put("active", getActive());
		attributes.put("debugMode", getDebugMode());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String ipAddresses = (String)attributes.get("ipAddresses");

		if (ipAddresses != null) {
			setIpAddresses(ipAddresses);
		}

		String roles = (String)attributes.get("roles");

		if (roles != null) {
			setRoles(roles);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Boolean debugMode = (Boolean)attributes.get("debugMode");

		if (debugMode != null) {
			setDebugMode(debugMode);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	public String getIpAddresses() {
		if (_ipAddresses == null) {
			return StringPool.BLANK;
		}
		else {
			return _ipAddresses;
		}
	}

	public void setIpAddresses(String ipAddresses) {
		_ipAddresses = ipAddresses;
	}

	public String getRoles() {
		if (_roles == null) {
			return StringPool.BLANK;
		}
		else {
			return _roles;
		}
	}

	public void setRoles(String roles) {
		_roles = roles;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	public void setNotes(String notes) {
		_notes = notes;
	}

	public boolean getActive() {
		return _active;
	}

	public boolean isActive() {
		return _active;
	}

	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	public boolean getDebugMode() {
		return _debugMode;
	}

	public boolean isDebugMode() {
		return _debugMode;
	}

	public void setDebugMode(boolean debugMode) {
		_columnBitmask |= DEBUGMODE_COLUMN_BITMASK;

		if (!_setOriginalDebugMode) {
			_setOriginalDebugMode = true;

			_originalDebugMode = _debugMode;
		}

		_debugMode = debugMode;
	}

	public boolean getOriginalDebugMode() {
		return _originalDebugMode;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			AdminIPValidationData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdminIPValidationData toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AdminIPValidationData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AdminIPValidationDataImpl adminIPValidationDataImpl = new AdminIPValidationDataImpl();

		adminIPValidationDataImpl.setId(getId());
		adminIPValidationDataImpl.setIpAddresses(getIpAddresses());
		adminIPValidationDataImpl.setRoles(getRoles());
		adminIPValidationDataImpl.setCompanyId(getCompanyId());
		adminIPValidationDataImpl.setUserId(getUserId());
		adminIPValidationDataImpl.setUserName(getUserName());
		adminIPValidationDataImpl.setCreateDate(getCreateDate());
		adminIPValidationDataImpl.setModifiedDate(getModifiedDate());
		adminIPValidationDataImpl.setNotes(getNotes());
		adminIPValidationDataImpl.setActive(getActive());
		adminIPValidationDataImpl.setDebugMode(getDebugMode());

		adminIPValidationDataImpl.resetOriginalValues();

		return adminIPValidationDataImpl;
	}

	public int compareTo(AdminIPValidationData adminIPValidationData) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				adminIPValidationData.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AdminIPValidationData adminIPValidationData = null;

		try {
			adminIPValidationData = (AdminIPValidationData)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = adminIPValidationData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AdminIPValidationDataModelImpl adminIPValidationDataModelImpl = this;

		adminIPValidationDataModelImpl._originalId = adminIPValidationDataModelImpl._id;

		adminIPValidationDataModelImpl._setOriginalId = false;

		adminIPValidationDataModelImpl._originalCompanyId = adminIPValidationDataModelImpl._companyId;

		adminIPValidationDataModelImpl._setOriginalCompanyId = false;

		adminIPValidationDataModelImpl._originalActive = adminIPValidationDataModelImpl._active;

		adminIPValidationDataModelImpl._setOriginalActive = false;

		adminIPValidationDataModelImpl._originalDebugMode = adminIPValidationDataModelImpl._debugMode;

		adminIPValidationDataModelImpl._setOriginalDebugMode = false;

		adminIPValidationDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdminIPValidationData> toCacheModel() {
		AdminIPValidationDataCacheModel adminIPValidationDataCacheModel = new AdminIPValidationDataCacheModel();

		adminIPValidationDataCacheModel.id = getId();

		adminIPValidationDataCacheModel.ipAddresses = getIpAddresses();

		String ipAddresses = adminIPValidationDataCacheModel.ipAddresses;

		if ((ipAddresses != null) && (ipAddresses.length() == 0)) {
			adminIPValidationDataCacheModel.ipAddresses = null;
		}

		adminIPValidationDataCacheModel.roles = getRoles();

		String roles = adminIPValidationDataCacheModel.roles;

		if ((roles != null) && (roles.length() == 0)) {
			adminIPValidationDataCacheModel.roles = null;
		}

		adminIPValidationDataCacheModel.companyId = getCompanyId();

		adminIPValidationDataCacheModel.userId = getUserId();

		adminIPValidationDataCacheModel.userName = getUserName();

		String userName = adminIPValidationDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			adminIPValidationDataCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			adminIPValidationDataCacheModel.createDate = createDate.getTime();
		}
		else {
			adminIPValidationDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			adminIPValidationDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			adminIPValidationDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		adminIPValidationDataCacheModel.notes = getNotes();

		String notes = adminIPValidationDataCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			adminIPValidationDataCacheModel.notes = null;
		}

		adminIPValidationDataCacheModel.active = getActive();

		adminIPValidationDataCacheModel.debugMode = getDebugMode();

		return adminIPValidationDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", ipAddresses=");
		sb.append(getIpAddresses());
		sb.append(", roles=");
		sb.append(getRoles());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", debugMode=");
		sb.append(getDebugMode());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("gr.open.marketplace.model.AdminIPValidationData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipAddresses</column-name><column-value><![CDATA[");
		sb.append(getIpAddresses());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roles</column-name><column-value><![CDATA[");
		sb.append(getRoles());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debugMode</column-name><column-value><![CDATA[");
		sb.append(getDebugMode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdminIPValidationData.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AdminIPValidationData.class
		};
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private String _ipAddresses;
	private String _roles;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _notes;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private boolean _debugMode;
	private boolean _originalDebugMode;
	private boolean _setOriginalDebugMode;
	private long _columnBitmask;
	private AdminIPValidationData _escapedModelProxy;
}